# This policy uses the Sentinel tfplan import to require that
# all VMware VMs obey CPU and memory limits

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all VMware VMs have obey CPU and memory limits
validate_cpu_and_memory_limits = func(cpu_limit, memory_limit) {

  # Initialize booleans to true
  # They will be set to false if any instances violate rules

  result = {
    "valid_cpu":    true,
    "valid_memory": true,
  }

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("vsphere_virtual_machine")

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations
    if length(r.diff) == 0 {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff["num_cpus"].computed else false is true {
      print("VM", address, "has attribute, num_cpus, that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # result["valid_cpu"] = false
    } else {
      # Validate that each instance has valid number of CPUs
      if int(r.applied.num_cpus) > cpu_limit {
        print("Virtual machine", address, "has", r.applied.num_cpus, "CPUs",
              "which is greater than the limit", cpu_limit)
        result["valid_cpu"] = false
        }
    } // end cpus computed check

    # Determine if the attribute is computed
    if r.diff["memory"].computed else false is true {
      print("resource", address, "has attribute, memory, that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # result["valid_memory"] = false
    } else {
      # Validate that each instance has valid amount of memory
      if int(r.applied.memory) > memory_limit {
        print("Virtual machine", address, "has", r.applied.memory,
              "MB of memory, which is greater than the limit", memory_limit)
        result["valid_memory"] = false
      }
    } // end memory computed check

  } // end resource instances

  return result
}

##### Rules #####

# Call the validation function and assign results
validations = validate_cpu_and_memory_limits(4, 8192)
valid_cpu = validations["valid_cpu"]
valid_memory = validations["valid_memory"]

# Main rule
main = rule {
  valid_cpu and valid_memory
}
